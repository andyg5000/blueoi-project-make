<?php

/**
 * @file medidf_rememberplate.module
 * TODO: Enter file description here.
 */


/**
 * Implementation of hook_form_alter()
 *
 * Modify the add to cart form on plates and engraving to redirect on last selected plate.
 */
function medidf_rememberplate_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form_state['context']['entity'])) {
    return;
  }
  if (!isset($form_state['build_info']['args'][0]->data['context'])) {
    return;
  }
  $context = $form_state['build_info']['args'][0]->data['context'];
  // update redirect 
  $update_redirect = FALSE;
  if ( isset($context['engraving_field']) ) {
    $update_redirect = TRUE;
  }
  if ( isset($context['entity']['product_reference_field_name']) &&
    $context['entity']['product_reference_field_name'] == 'field_plateref'
    ) {
    $update_redirect = TRUE;
  }
  if ( $update_redirect != TRUE ) {
    return;
  }
  if ( isset($_GET['remember_plate']) && !empty($_GET['remember_plate']) ) {
    medidf_rememberplate_form_enforce_selected_plate($form, $form_state, $form_id);
  }  
  $selected_plate = '';
  if ( isset($form_state['input']['product_id']) ) {
    $selected_plate = $form_state['input']['product_id'];
  }
  if (empty($selected_plate)) {
    return;
  }
  $query = parse_url($form['#action'], PHP_URL_QUERY);
  if( $query ) {
      $form['#action'] .= '&remember_plate=' . $selected_plate;
  }
  else {
      $form['#action'] .= '?remember_plate=' . $selected_plate;
  }
}

/**
 * Pseudo Implementation of hook_form_alter()
 *
 * Enforce the add2cart forms selected product only on plates.
 */
function medidf_rememberplate_form_enforce_selected_plate(&$form, &$form_state, $form_id) {
  // only update the plate form.
  $context = $form_state['build_info']['args'][0]->data['context'];
  if ( isset($context['entity']['product_reference_field_name']) &&
    $context['entity']['product_reference_field_name'] == 'field_plateref'
    ) {
    $previous_plate = filter_input(INPUT_GET, 'remember_plate');
    $form['product_id']['#default_value'] = $previous_plate;
  }
}

/**
 * Implements hook_entity_view().
 *
 * update node entity and rearrange the items on field_plateref so that previous plate
 * becomes the default plate; this function must trigger before commerce_product_reference_entity_view
 * made possible by medidf_rememberplate install
 */
function medidf_rememberplate_entity_view($entity, $entity_type, $view_mode, $langcode) {
  if ( $entity_type != 'node' ) {
    return;
  }
  if ( !isset($entity->content['field_plateref'][0]['product_id']['#default_value']) ) {
    return;
  }
  $previous_plate = filter_input(INPUT_GET, 'remember_plate');
  if (empty($previous_plate)) {
    return;
  }
  //dpm($entity->content['field_plateref']['#object']);
  //dpm($entity->content['field_plateref'][0]['product_id']['#default_value']);
  $entity->content['field_plateref'][0]['product_id']['#default_value'] = $previous_plate;
  $previous_plate_key = 0;
  $default_value_product_id = $entity->field_plateref[LANGUAGE_NONE][0]['product_id']; 
  foreach ( $entity->field_plateref[LANGUAGE_NONE] as $key => $value ) {
    if ($value['product_id'] == $previous_plate) {
      $previous_plate_key = $key;
    }
  }
  $entity->field_plateref[LANGUAGE_NONE][0]['product_id'] = $previous_plate;
  $entity->field_plateref[LANGUAGE_NONE][$previous_plate_key]['product_id'] = $default_value_product_id;
}
