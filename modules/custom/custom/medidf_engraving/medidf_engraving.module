<?php

/**
 * @file medidf_engraving.module
 * TODO: Enter file description here.
 */

define("MEDIDF_ENGRAVING_DEFAULT_FEE_TYPE", "per_line");
define("MEDIDF_ENGRAVING_FEE_PER_LINE", "per_line");
define("MEDIDF_ENGRAVING_BULK_FEE", "bulk");
define("MEDIDF_ENGRAVING_DEFAULT_LABEL", "Engraving");
module_load_install('medidf_engraving');

/**
 * Implements hook_field_info().
 */
function medidf_engraving_field_info() {
  return array(
    'engraving_field' => array(
      'label' => t('Engraving Field'),
      'settings' => array(),
      'instance_settings' => array(),
      'description' => t('This field stores Engraving information in the database.'),
      'module' => 'medidf_engraving',
      'default_widget' => 'medidf_engraving_admin_form',
      'default_formatter' => 'medidf_engraving_add2cart_form',
      'property_callbacks' => array('medidf_engraving_property_callback'),
    ),
  );
}

function medidf_engraving_property_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['type'] = 'list<text>';
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['property info']['engr_label'] = array(
    'type' => 'text',
    'label' => t('Engraving Label'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $property['property info']['engr_amount'] = array(
    'type' => 'number',
    'label' => t('Engraving Amount'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $property['property info']['engr_maxlength'] = array(
    'type' => 'number',
    'label' => t('Engraving Max Length'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $property['property info']['engr_group_type'] = array(
    'type' => 'text',
    'label' => t('Engraving Group Type'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $property['property info']['engr_customer_input'] = array(
    'type' => 'text',
    'label' => t('Engraving Customer Input'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  unset($property['query callback']);
}


/**
 * Implements hook_commerce_price_component_type_info().
 */
function medidf_engraving_commerce_price_component_type_info() {
  $components = array();
  // Define a generic shipping price component type.
  $components['engraving_fee'] = array(
    'title' => t('Engraving Fee'),
    'weight' => 20,
  );
  return;
}

/**
 * Implements hook_field_widget_info().
 */
function medidf_engraving_field_widget_info() {
  $widgets = array();
  $widgets['medidf_engraving_admin_form'] = array(
    'label' => t('Setting for Engraving Add2Cart Form (Nodes)'),
    'field types' => array('engraving_field'),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
  /*
  $widgets['medidf_engraving_manage_form'] = array(
    'label' => t('Managing Customer Input on Engraving (Line Items)'),
    'field types' => array('engraving_field'),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
  */
  return $widgets;
}

/**
 * Implements hook_field_is_empty().
 *
 * Pseudo-hook.
 */
function medidf_engraving_field_is_empty($item, $field) {
  if ($field['type'] == 'engraving_field') {
    if ( empty($item['engr_label']) &&
      empty($item['engr_maxlength'])
      ) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_field_settings_form().
 *
 * Pseudo-hook.
 */
function medidf_engraving_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  if ($field['type'] !== 'engraving_field') {
    return;
  }
  $form['group_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Group Label in Add2Cart Form'),
    '#size' => 10,
    '#default_value' => isset($settings['group_label']) ? $settings['group_label'] : MEDIDF_ENGRAVING_DEFAULT_LABEL,
    '#description' => t('Add2Cart Form Label to use for this group. ie. Front Side Engraving, Backside Engraving'),
  );
  $form['group_fee_type'] = array(
    '#type' => 'select',
    '#title' => t('Group Fee Type'),
    '#options' => array(
      MEDIDF_ENGRAVING_BULK_FEE => t('Bulk One Fee'),
      MEDIDF_ENGRAVING_FEE_PER_LINE => t('Per Line Fee'),
    ),
    '#default_value' => isset($settings['group_fee_type']) ? $settings['group_fee_type'] : MEDIDF_ENGRAVING_DEFAULT_FEE_TYPE,
  );
  return $form;
}


/**
 * Implements hook_field_widget_form().
 */
function medidf_engraving_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $base = $element;
  $settings = $instance['settings'];
  if ( !in_array($instance['widget']['type'],
    array('medidf_engraving_admin_form', 'medidf_engraving_manage_form')) ) {
    return;
  }
  $element['engr_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Form Label'),
    '#weight' => 0,
    '#default_value' => isset($items[$delta]['engr_label']) ? $items[$delta]['engr_label'] : NULL,
  ) + $base;
  if ( isset($settings['group_fee_type']) &&
    ($settings['group_fee_type'] != MEDIDF_ENGRAVING_BULK_FEE) ) {
    $element['engr_amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Amount'),
      '#weight' => 2,
      '#default_value' => isset($items[$delta]['engr_amount']) ? $items[$delta]['engr_amount'] : 0,
      '#element_validate' => array('medidf_engraving_amount_validate'),
    ) + $base;
  }
  $element['engr_maxlength'] = array(
    '#type' => 'textfield',
    '#title' => t('Max Length'),
    '#weight' => 3,
    '#default_value' => isset($items[$delta]['engr_maxlength']) ? $items[$delta]['engr_maxlength'] : NULL,
  ) + $base;
  if ($instance['widget']['type'] == 'medidf_engraving_manage_form') {
    $element['engr_customer_input'] = array(
      '#type' => 'textfield',
      '#title' => t('Customer Input'),
      '#weight' => 4,
      '#default_value' => isset($items[$delta]['engr_customer_input']) ? $items[$delta]['engr_customer_input'] : NULL,
    ) + $base;
  }
  $element['engr_group_type'] = array(
    '#type' => 'hidden',
    '#weight' => 3,
    '#value' => isset($settings['group_fee_type']) ? $settings['group_fee_type'] : MEDIDF_ENGRAVING_DEFAULT_FEE_TYPE,
  ) + $base;
  if ( isset($settings['group_fee_type']) &&
    ($settings['group_fee_type'] == MEDIDF_ENGRAVING_BULK_FEE) ) {
    $bulk_fee = 0.0;
    $bulk_name = $field['field_name'] . '_bulk_fee';
    if (isset($form_state['input'][$bulk_name])) {
      $bulk_fee = $form_state['input'][$bulk_name];
    }
    elseif (isset($items[0]['engr_amount'])) {
      $bulk_fee = $items[0]['engr_amount'];
    }
    $form[$bulk_name] = array(
      '#type' => 'textfield',
      '#title' => $settings['group_label'] . ' Bulk Fee',
      '#default_value' => $bulk_fee,
      '#element_validate' => array('medidf_engraving_amount_validate'),
    );
  }
  // make sure our widget submit handler is also added before the other sumb handlers.
  if ( isset($form['actions']['submit']['#submit']) &&
    !in_array('medidf_engraving_field_widget_submit', $form['actions']['submit']['#submit']) ) {
    array_unshift($form['actions']['submit']['#submit'], 'medidf_engraving_field_widget_submit');
    $form['actions']['submit']['#submit'] = array_unique($form['actions']['submit']['#submit']);
  }
  return $element;
}

/**
 * Helper Validation function makes sure that amount is numeric
 */
function medidf_engraving_amount_validate($element, &$form_state, $form) {
  if (isset($element['#value']) && !is_numeric($element['#value'])) {
    form_error($element, t('This engraving amount should be numeric.'));
  }
  $engraving_bulk_fields = array();
  foreach ($form_state['values'] as $key => $values) {
    if ( (strpos($key, '_bulk_fee') !== FALSE) &&
      is_numeric($form_state['values'][$key])
      ) {
      $keys = explode('_bulk_fee', $key);
      $engraving_bulk_fields[] = $keys[0];
    }
  }
  foreach ($engraving_bulk_fields as $engraving_bulk_field) {
    if (isset($form_state['values'][$engraving_bulk_field])) {
      foreach($form_state['values'][$engraving_bulk_field][LANGUAGE_NONE] as $key => $values) {
        if (is_numeric($key)) {
          $form_state['values'][$engraving_bulk_field][LANGUAGE_NONE][$key]['engr_amount'] = $form_state['values'][$engraving_bulk_field . '_bulk_fee'];
        }
      }
    }
  }
}

/**
 * Helper Widget submit function implementing engraving field logic.
 */
function medidf_engraving_field_widget_submit($form, &$form_state) {
  $engraving_bulk_fields = array();
  foreach ($form_state['values'] as $key => $values) {
    if ( (strpos($key, '_bulk_fee') !== FALSE) &&
      is_numeric($form_state['values'][$key])
      ) {
      $keys = explode('_bulk_fee', $key);
      $engraving_bulk_fields[] = $keys[0];
    }
  }
  foreach ($engraving_bulk_fields as $engraving_bulk_field) {
    if (isset($form_state['values'][$engraving_bulk_field])) {
      foreach($form_state['values'][$engraving_bulk_field][LANGUAGE_NONE] as $key => $values) {
        if (is_numeric($key)) {
          $form_state['values'][$engraving_bulk_field][LANGUAGE_NONE][$key]['engr_amount'] = $form_state['values'][$engraving_bulk_field . '_bulk_fee'];
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function medidf_engraving_field_formatter_info() {
  return array(
    // This formatter that shows an add2cart form.
    'medidf_engraving_add2cart_form' => array(
      'label' => t('Engraving Add to Cart Form'),
      'description' => t('Display an Engraving Add to Cart form'),
      'field types' => array('engraving_field'),
    ),
    'medidf_engraving_show_cart_values' => array(
      'label' => t('Engraving Show Cart Values'),
      'description' => t('Display Customers Engraving Desires'),
      'field types' => array('engraving_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function medidf_engraving_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();
  $valid_engraving_formatters = array('medidf_engraving_show_cart_values',
    'medidf_engraving_add2cart_form');
  if ( !in_array($display['type'], $valid_engraving_formatters)) {
    return;
  }
  if ($display['type'] == 'medidf_engraving_add2cart_form') {
    if ( empty($items) ) {
      return;
    }
    if ( !isset($instance['settings']['group_fee_type']) ) {
      return;
    }
    $fee_type = $instance['settings']['group_fee_type'];
    $engraving_fee_product = commerce_product_load_by_sku(MEDIDF_ENGRAVING_SKU);
    if ($engraving_fee_product == FALSE) {
      return;
    }
    $type = 'product';
    $label = $entity->title . ' ' . $instance['settings']['group_label'] . ' Fee';
    $line_item = commerce_product_line_item_new($engraving_fee_product, 1, 0, array(), $type);
    $product_ids = array($engraving_fee_product->product_id);
    $line_item->data['context']['product_ids'] = $product_ids;
    $line_item->data['context']['add_to_cart_combine'] = FALSE;
    $line_item->data['context']['show_single_product_attributes'] = FALSE;
    $line_item->data['context']['engraving_field_fee_type'] = $fee_type;
    $line_item->data['context']['engraving_field_label'] = $label;
    $line_item->data['context']['engraving_field_form_label'] = $instance['settings']['group_label'];
    $line_item->data['context']['engraving_field_items'] = $items;
    $line_item->data['context']['engraving_field'] = $field['field_name'];
    $result[] = array(
      '#arguments' => array(
        'form_id' => commerce_cart_add_to_cart_form_id($product_ids),
        'line_item' => $line_item,
        'show_quantity' => FALSE,
      ),
    );
  }
  if ($display['type'] == 'medidf_engraving_show_cart_values') {
    if ( empty($items) ) {
      return;
    }
    foreach ($items as $delta => $item) {
      $result[$delta] = array( '#markup' =>
        $item['engr_label'] . ' : ' . $item['engr_customer_input']
      );
    }
  }
  return $result;
}

/**
 * Implements hook_field_attach_view_alter().
 */
function medidf_engraving_field_attach_view_alter(&$output, $context) {
  // Loop through the fields passed in looking for any product reference fields
  // formatted with the Add to Cart form display formatter.
  foreach ($output as $field_name => $element) {
    if (!empty($element['#formatter']) && $element['#formatter'] == 'medidf_engraving_add2cart_form') {
      // Prepare the context information needed by the cart form.
      $cart_context = $context;
      // Add the context for displaying product fields in the context of an entity
      // that references the product by looking at the entity this product
      // reference field is attached to.
      list($entity_id, $vid, $bundle) = entity_extract_ids($context['entity_type'], $context['entity']);
      $cart_context['class_prefix'] = $context['entity_type'] . '-' . $entity_id;
      $cart_context['view_mode'] = $context['entity_type'] . '_' . $element['#view_mode'];

      $entity_uri = entity_uri($context['entity_type'], $element['#object']);

      foreach (element_children($element) as $key) {
        // Extract the drupal_get_form() arguments array from the element.
        $arguments = $element[$key]['#arguments'];

        // Add the display path and referencing entity data to the line item.
        $arguments['line_item']->data['context']['display_path'] = $entity_uri['path'];

        $arguments['line_item']->data['context']['entity'] = array(
          'entity_type' => $context['entity_type'],
          'entity_id' => $entity_id,
          'product_reference_field_name' => $field_name,
        );

        // Update the product_ids variable to point to the entity data if we're
        // referencing multiple products.
        if (count($arguments['line_item']->data['context']['product_ids']) > 1) {
          $arguments['line_item']->data['context']['product_ids'] = 'entity';
        }

        // Replace the array containing the arguments with the return value of
        // drupal_get_form(). It will be rendered when the rest of the object is
        // rendered for display.
        $form = array();
        $form = drupal_get_form($arguments['form_id'],
          $arguments['line_item'],
          $arguments['show_quantity'],
          $cart_context
        );
        $output[$field_name][$key] = $form;
      }
    }
  }
}

/**
 * Implementation of hook_form_alter()
 *
 * Modify the add to cart form, add line items depending on front engraving picks.
 */
function medidf_engraving_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form_state['context']['entity'])) {
    return;
  }
  if (!isset($form_state['build_info']['args'][0]->data['context'])) {
    return;
  }
  $context = $form_state['build_info']['args'][0]->data['context'];
  if ( !isset($context['engraving_field']) || !isset($context['engraving_field_items']) ) {
    return;
  }
  if (empty($context['engraving_field_items'])) {
    return;
  }
  $price = commerce_product_calculate_sell_price($form_state['default_product']);
  $display_price_id = 'display-price-' . $form_id;
  $display_price_id = str_replace('_', '-', $display_price_id);
  $form['display_price'] = array(
      '#type' => 'item',
      '#prefix' => '<div class="display-price">',
      '#suffix' => '</div>',
      //'#ajax' => array('callback' => 'medidf_engraving_add_to_cart_form_attributes_refresh'),
      '#id' => $display_price_id,
  );
  if ( isset($context['engraving_field']) &&
    ($context['engraving_field_fee_type'] == MEDIDF_ENGRAVING_BULK_FEE) &&
    isset($form_state['default_product']->commerce_price)
    ) {
    $bulk_fee = $context['engraving_field_items'][0]['engr_amount'];
    $price['amount'] = commerce_currency_decimal_to_amount($bulk_fee, $price['currency_code'], FALSE);
  }
  $form['display_price']['#markup'] = commerce_currency_format($price['amount'], $price['currency_code']);
  $form_field_group = $context['engraving_field'];
  $field_values = $context['engraving_field_items'];
  // workaround with drupal fieldset grouping and fieldnames,
  // currently field values array not able to have hierarchy information.
  $form_field_prefix = 'fe|' . $form_field_group . '|';
  $form[$form_field_group] = array(
    '#type' => 'fieldset',
    '#title' => $context['engraving_field_form_label'],
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $label_name = $form_field_prefix . 'label';
  $form[$form_field_group][$label_name] = array(
    '#type' => 'hidden',
    '#value' => $context['engraving_field_label'],
  );
  foreach ($field_values as $field_delta => $field_value) {
    $form[$form_field_group][$field_delta] = array(
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $customer_input_name =  $form_field_prefix . $field_delta . '|ci';
    $add_name = $form_field_prefix . $field_delta . '|add';
    $amount_name = $form_field_prefix . $field_delta . '|amount';
    $form[$form_field_group][$field_delta][$customer_input_name] = array(
      '#type' => 'textfield',
      //'#ajax' => array('callback' => 'medidf_engraving_add_to_cart_form_attributes_refresh'),
    );
    if ( $field_delta === 0 ) {
      $form[$form_field_group][$field_delta][$customer_input_name]['#required'] = TRUE;
    }
    if ( isset($field_value['engr_label']) ) {
      $form[$form_field_group][$field_delta][$customer_input_name]['#title'] = $field_value['engr_label'];
    }
    if ( isset($field_value['engr_maxlength']) ) {
      $form[$form_field_group][$field_delta][$customer_input_name]['#size'] = $field_value['engr_maxlength'];
      $form[$form_field_group][$field_delta][$customer_input_name]['#maxlength'] = $field_value['engr_maxlength'];
    }
    if ( isset($context['engraving_field']) &&
      ($context['engraving_field_fee_type'] == MEDIDF_ENGRAVING_FEE_PER_LINE) ) {
      $form[$form_field_group][$field_delta][$amount_name] = array(
        '#type' => 'hidden',
        '#value' => $field_value['engr_amount'],
      );
      $currency_code = $form_state['default_product']->commerce_price[LANGUAGE_NONE][0]['currency_code'];
//      $form[$form_field_group][$field_delta]['price_amount'] = array(
//        '#type' => 'item',
//       '#markup' => commerce_currency_format($field_value['engr_amount'], $currency_code, NULL, FALSE),
//      );
    }
  }
  if ( isset($context['engraving_field']) &&
    ($context['engraving_field_fee_type'] == MEDIDF_ENGRAVING_FEE_PER_LINE) ) {
    //$form['#validate'] = 'medidf_engraving_add2cart_validate';
  }
  // make sure engraving submit handler logic fires first and updates the form state first
  // before it gets to the commerce_cart_add_to_cart_form_submit handler
  array_unshift($form['#submit'], 'medidf_engraving_add2cart_submit');

  $engrave_add2cart_class = 'back_engrave_button';
  if ( $context['engraving_field_fee_type'] == MEDIDF_ENGRAVING_FEE_PER_LINE ) {
    $engrave_add2cart_class = 'front_engrave_button';
  }
  $form['submit']['#attributes']['class'] = array($engrave_add2cart_class);

  // make sure that #action belongs to the original page
  if (isset($form['#action']) &&
    ($form['#action'] == '/system/ajax') &&
    isset($form_state['context']['entity']->display_context['entity']->nid)
    ) {
    $display_nid = $form_state['context']['entity']->display_context['entity']->nid;
    $path_alias = drupal_lookup_path('alias', 'node/' . $display_nid);
    $form['#action'] = '/' . $path_alias;
  }

}

/**
 * Ajax callback: returns AJAX commands when field_engraving attribute is changed.
 */
function medidf_engraving_add_to_cart_form_attributes_refresh($form, $form_state) {
  $commands = array();
  if (!isset($form_state['context']['entity'])) {
    return;
  }
  if (!isset($form_state['build_info']['args'][0]->data['context'])) {
    return;
  }
  if (!isset($form_state['default_product'])) {
    return;
  }
  $context = $form_state['build_info']['args'][0]->data['context'];
  if ( !isset($context['engraving_field']) || !isset($context['engraving_field_items']) ) {
    return;
  }
  // do not proceed with operation if the context is not engraving field
  // also only proceed if the context engraving field fee type is 'per line'
  if ( !isset($context['engraving_field']) ||
    ($context['engraving_field_fee_type'] !== MEDIDF_ENGRAVING_FEE_PER_LINE)
    ) {
    return;
  }
  $engraving_delta_values = array();
  foreach ($form_state['values'] as $key => $value) {
    $keys = array();
    $pos = strrpos($key, "fe|");
    if ($pos !== FALSE) {
      $keys = explode('|', $key);
      if (is_numeric($keys[2])) {
        $engraving_delta_values[$keys[1]][$keys[2]][$keys[3]] = $value;
      }
    }
  }
  if (empty($engraving_delta_values)) {
    return;
  }
  $surcharge_amount = 0.0;
  foreach ($engraving_delta_values[$context['engraving_field']] as $delta => $field_values) {
    if ( (isset($field_values['ci'])) &&
      (!empty($field_values['ci'])) &&
       (isset($field_values['amount']))
      ) {
      $surcharge_amount += $field_values['amount'];
    }
  }
  $form_id = $form['#form_id'];
  $surcharge_amount = commerce_currency_decimal_to_amount($surcharge_amount, $form_state['default_product']->commerce_price[LANGUAGE_NONE][0]['currency_code']);
  $surcharge_amount_text = commerce_currency_format($surcharge_amount, $form_state['default_product']->commerce_price[LANGUAGE_NONE][0]['currency_code']);
  $display_price_id = 'display-price-' . $form_id;
  $display_price_id = str_replace('_', '-', $display_price_id);
  $new_price = '<div id="' . $display_price_id . '" class="form-item form-type-item">'
          . $surcharge_amount_text
          . '</div>';
  $commands[] = ajax_command_replace('#' . $form['display_price']['#id'], $new_price);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Submit handler commerce add2cart that has field_engraving features..
 * This function is to populate the engraving field delta values specifically
 * customer_input and add in the surcharge amount in the form_state data
 *
 * Futher logic wil be implemented in hook_commerce_product_calculate_sell_price_line_item_alter
 * to populate surcharge amount and field_engraving data.
 *
 * For array : $form_state['values'] , Expected pattern of index keys for engraving fields
 *    fe|field_engraver|label
 *    fe|field_engraver|0|ci
 *    fe|field_engraver|0|add
 *    fe|field_engraver|0|amount
 *    fe|field_engraver|1|ci
 *    fe|field_engraver|1|add
 *    fe|field_engraver|1|amount
 *    fe|field_engraver|2|ci
 *    fe|field_engraver|2|add
 *    fe|field_engraver|2|amount
 */
function medidf_engraving_add2cart_submit($form, &$form_state) {
  if (!isset($form_state['build_info']['args'][0]->data['context'])) {
    return;
  }
  $context = $form_state['build_info']['args'][0]->data['context'];
  if ( !isset($context['engraving_field']) || !isset($context['engraving_field_items']) ) {
    return;
  }
  $engraving_delta_values = array();
  $form_state['line_item']->data['engraving_field_surcharge'] = 0.0;
  // if the field settings is a bulk just get the first item's amount and
  // thats the surcharge.
  if ( ($context['engraving_field_fee_type'] == MEDIDF_ENGRAVING_BULK_FEE) ) {
    $form_state['line_item']->data['engraving_field_surcharge'] = $context['engraving_field_items'][0]['engr_amount'];
  }
  foreach ($form_state['values'] as $key => $value) {
    $keys = array();
    $pos = strrpos($key, "fe|");
    if ($pos !== FALSE) {
      $keys = explode('|', $key);
      if (isset($keys[1]) &&
        isset($keys[2]) &&
        isset($keys[3]) &&
        is_numeric($keys[2]) &&
        ($keys[3] == 'ci') ) {
        $context['engraving_field_items'][$keys[2]]['engr_customer_input'] = strtoupper($value);
      }
      if ( ($context['engraving_field_fee_type'] == MEDIDF_ENGRAVING_FEE_PER_LINE) &&
        is_numeric($keys[2]) ) {
        $engraving_delta_values[$keys[2]][$keys[3]] = $value;
      }
    }
  }
  $form_state['line_item']->data['field_le_engraving'][LANGUAGE_NONE] = $context['engraving_field_items'];
  // if the field settings is per line fee, then sum up then added engraving line(s).
  if ( ($context['engraving_field_fee_type'] == MEDIDF_ENGRAVING_FEE_PER_LINE) &&
    !empty($engraving_delta_values)) {
    foreach ($engraving_delta_values as $key => $values) {
      if ( isset($values['amount']) ) {
        $form_state['line_item']->data['engraving_field_surcharge'] += floatval($values['amount']);
      }
    }
  }
}

/**
 * Implementation of hook_commerce_product_calculate_sell_price_line_item_alter()
 *
 * Implements the engraving surcharge and populates field_engraving data in the line
 * item object.
 *
 * It seems like commerce_order_calculate_total directly interferes with our logic.
 * using medidf_engraving_commerce_line_item_presave to implement logic instead.
 */
/* -- Delete this line if you want to use this function
function medidf_engraving_commerce_product_calculate_sell_price_line_item_alter($line_item) {
  if ( !isset($line_item->data['engraving_field_surcharge']) &&
    !isset($line_item->data['field_le_engraving'])
    ) {
    return;
  }
  $surcharge_amount = $line_item->data['engraving_field_surcharge'];
  $currency_code = $line_item->commerce_unit_price[LANGUAGE_NONE][0]['currency_code'];
  $surcharge_amount = commerce_currency_decimal_to_amount($surcharge_amount, $currency_code);
  //$line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'] = $surcharge_amount;
  //$line_item->field_le_engraving = $line_item->data['field_le_engraving'];
  if (isset($line_item->data['context']['engraving_field_label'])) {
    $line_item->line_item_label = $line_item->data['context']['engraving_field_label'];
  }
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $line_item_wrapper->commerce_unit_price->amount = $surcharge_amount;
  $line_item_wrapper->commerce_unit_price->currency_code = $currency_code;
  $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
    $line_item_wrapper->commerce_unit_price->value(),
    'engraving_fee',
    $line_item_wrapper->commerce_unit_price->value(),
    TRUE,
    FALSE
  );
  //commerce_line_item_rebase_unit_price($line_item);
  commerce_line_item_save($line_item);
  commerce_line_item_rebase_unit_price($line_item);
}
// */

/**
 * Implementation of hook_commerce_line_item_presave().
 *
 * Implements the engraving surcharge and populates field_engraving data in the line
 * item object.
 *
 */
function medidf_engraving_commerce_line_item_presave($entity) {
  if ( isset($entity->type) &&
    ($entity->type != 'product')
    ) {
    return;
  }
  if ( !isset($entity->data['engraving_field_surcharge']) ||
    !isset($entity->data['field_le_engraving'])
    ) {
    return;
  }
  if ( isset($entity->data['field_le_engraving']) &&
    !isset($entity->field_le_engraving)
    ) {
    $entity->field_le_engraving = $entity->data['field_le_engraving'];
  }
  if (isset($entity->data['context']['engraving_field_label'])) {
    $entity->line_item_label = $entity->data['context']['engraving_field_label'];
  }
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $entity);
  $currency_code = $line_item_wrapper->commerce_total->currency_code->value();
  $total = commerce_currency_convert(
    $line_item_wrapper->commerce_total->amount->value(),
    $currency_code,
    $currency_code
  );
  if ($total < floatval($entity->data['engraving_field_surcharge'])) {
    $surcharge_amount = $entity->data['engraving_field_surcharge'];
    $surcharge_amount = commerce_currency_decimal_to_amount($surcharge_amount, $currency_code);
    $line_item_wrapper->commerce_unit_price->amount = $surcharge_amount;
    $line_item_wrapper->commerce_unit_price->currency_code = $currency_code;
    // not working :(
    /*
    $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
      $line_item_wrapper->commerce_unit_price->value(),
      'engraving_fee',
      $line_item_wrapper->commerce_unit_price->value(),
      TRUE,
      TRUE
    );
    */
    if ( isset($entity->commerce_unit_price[LANGUAGE_NONE][0]['data']['components']) &&
      (count($entity->commerce_unit_price[LANGUAGE_NONE][0]['data']['components']) == 1)
      ) {
      $engraving_price = array(
        'amount' => $surcharge_amount,
        'currency_code' => $currency_code,
        'data' => array(),
      );
      $engraving_fee_component = array(
        'name' => 'engraving_fee',
        'price' => $engraving_price,
        'included' => TRUE,
      );
      $entity->commerce_unit_price[LANGUAGE_NONE][0]['data']['components'][] = $engraving_fee_component;
    }
    if ( isset($entity->commerce_total[LANGUAGE_NONE][0]['data']['components']) &&
      (count($entity->commerce_total[LANGUAGE_NONE][0]['data']['components']) == 1)
      ) {
      $engraving_price = array(
        'amount' => $surcharge_amount,
        'currency_code' => $currency_code,
        'data' => array(),
      );
      $engraving_fee_component = array(
        'name' => 'engraving_fee',
        'price' => $engraving_price,
        'included' => TRUE,
      );
      $entity->commerce_total[LANGUAGE_NONE][0]['data']['components'][] = $engraving_fee_component;
    }
    $line_item_wrapper->commerce_total->amount = $surcharge_amount;
    $line_item_wrapper->commerce_total->currency_code = $currency_code;
    commerce_line_item_rebase_unit_price($entity);
  }
}
