<?php
define('MEDIDF_ADA_AFFILIATE_ID', 'ada_org');

function medidf_boot() {
  // create a session variable if an ada affiliate link
  if (!empty($_GET['a_aid'])) {
    $_SESSION['aff_flag'] = $_GET['a_aid'];
    setcookie('aff_flag', $_GET['a_aid'], 2147483647);
  }
}

/**
 * Implements hook_page_alter().
 */
function medidf_page_alter(&$page) {
  // If the page being viewed is the store.
  if (arg(0) == 'store') {
    $arg1 = str_replace('-', ' ', arg(1));
    // Attempt to load the taxonomy term by it's name.
    $term = taxonomy_get_term_by_name($arg1, 'catalog');
    if (!empty($term)) {
      // Load the metatags for the current term.
      $meta = metatag_metatags_load('taxonomy_term', reset($term)->tid);
      // Replace the metatags on the page object.
      $page['content']['metatags']['global'] = metatag_metatags_view('global', $meta);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function medidf_form_search_block_form_alter(&$form, &$form_state) {
  $form['search_block_form']['#title'] = t('Search'); // Change the text on the label element
  $form['search_block_form']['#title_display'] = 'invisible'; // Toggle label visibilty
  $form['search_block_form']['#size'] = 35;  // define size of the textfield
  $form['search_block_form']['#default_value'] = t('Search: type and hit enter'); // Set a default value for the textfield
  $form['actions']['submit']['#value'] = t('GO!'); // Change the text on the submit button

  // Add extra attributes to the text box
  $form['search_block_form']['#attributes']['onblur'] = "if (this.value == '') {this.value = 'Search: type and hit enter';}";
  $form['search_block_form']['#attributes']['onfocus'] = "if (this.value == 'Search: type and hit enter') {this.value = '';}";
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 * a) Display price in 'add to cart' form
 * b) extends commerce pricing attributes to be able to change the price field during add2cart event
 * c) modifies commerce pricing attributes to not show potential price amount changes to the attributes drop down field.
 * d) set payment method names for display on the checkout review page.
 * e) set final form submit text so it is clear the credit card is about to charged.
 */
function medidf_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state, $form_id) {
  // a) Add read only price field to add to cart form
  if ( isset($form_state['default_product']->commerce_price)
    && ($form_state['default_product']->sku !== 'engraving-fee')
    ) {
    $price = commerce_product_calculate_sell_price($form_state['default_product']);
    $form['display_price'] = array(
        '#type' => 'item',
        '#markup' => commerce_currency_format($price['amount'], $price['currency_code']),
        '#prefix' => '<div class="display-price">',
        '#suffix' => '</div>',
        '#disabled' => !empty($form_state['display_price']),
    );
    if (isset($form['field_inch_pricing'])) {
      $form['display_price'] = array(
          '#type' => 'item',
          '#title' => 'Size/Price',
          '#markup' => commerce_currency_format($price['amount'], $price['currency_code']),
          '#prefix' => '<div class="display-price">',
          '#suffix' => '</div>',
          '#ajax' => array('callback' => 'medidf_add_to_cart_form_attributes_refresh'),
          '#id' => 'display-price-medidf-' . $form_id,
      );
      $form['sizing_info'] = array(
          '#type' => 'item',
          '#markup' => '<p>This Custom Sized bracelet is based on your Exact Wrist Size.<br />
          <strong>WARNING: Do Not add extra room.  We add the extra room.</strong><br />
          Measure carefully. Select closest number(s). Use a tape measure.<br /><strong>
          Resizing costs extra.</strong> For help: see "How to Size" page.<br />
          For measuring assistance, please call 847-638-2223</p>',
          '#prefix' => '<div class="display-sizing-info">',
          '#suffix' => '</div>',
          '#weight' => '95',
      );
      $form['pricing_info'] = array(
          '#type' => 'item',
          '#markup' => '<p>Bracelet size and price is automatically calculated from your selected size.<br />
          NOTE: Larger sizes are priced higher.</p>',
          '#prefix' => '<div class="display-pricing-info">',
          '#suffix' => '</div>',
          '#weight' => '98',
      );
    }
  }
  // b) replace commerce pricing attributes field field_inch_pricing and add put in our custom price ajax to update display_price form field.
  // ideally commerce_pricing_attributes has a hook there..  http://drupal.org/node/1906956
  if (isset($form['field_inch_pricing'][0]['field_inches'][LANGUAGE_NONE]['#ajax']['callback'])) {
    $form['field_inch_pricing'][0]['field_inches'][LANGUAGE_NONE]['#ajax']['callback'] = 'medidf_add_to_cart_form_attributes_refresh';
  }
  // c)
  if (isset($form['field_inch_pricing'])) {
    _medidf_remove_priceamount_change_labels($form, $form_state, $form_id);
  }
}

// c) modifies commerce pricing attributes to not show potential price amount changes to the attributes drop down field.
function _medidf_remove_priceamount_change_labels(&$form, &$form_state, $form_id) {
  if (!isset($form['field_inch_pricing'][0]['field_inches'][LANGUAGE_NONE]['#options'])) {
    return;
  }
  foreach ($form['field_inch_pricing'][0]['field_inches'][LANGUAGE_NONE]['#options'] as $key => $label) {
    // new label 4" , only want the value before ( in this case its 4.
    $new_label = explode('(', $label);
    $form['field_inch_pricing'][0]['field_inches'][LANGUAGE_NONE]['#options'][$key] = $new_label[0];
  }
}

function medidf_menu_link($variables) {
  $element = $variables['element'];
  $sub_menu = '';

  $args = arg();
  if (!empty($args[1]) && $args[0] == 'store') {
    $element['#attributes']['class'][] = 'active-trail';
  }

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * Implements hook_module_implements_alter().
 *
 * make sure nih_add2cart's form alter gets called after commerce_options_set_reference
 * in pursuant of https://projects.prometsupport.com/issues/24058
 * helps b & c.
 */
function medidf_module_implements_alter(&$implementations, $hook) {
  if (isset($hook) &&
          ($hook === 'form_alter') &&
          is_array($implementations) &&
          isset($implementations['medidf'])
  ) {
    // Move medidf_form_commerce_cart_add_to_cart_form_alter() to the end of the list. module_implements()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    // pretty much make sure medidf_form_commerce_cart_add_to_cart_form_alter gets called after commerce_options_set_reference_form_alter
    $group = $implementations['medidf'];
    unset($implementations['medidf']);
    $implementations['medidf'] = $group;
  }
}

/**
 * Ajax callback: returns AJAX commands when an attribute widget is changed.
 * helps b
 */
function medidf_add_to_cart_form_attributes_refresh($form, $form_state) {
  $commands = array();

  if (!empty($form_state['default_product']) and !empty($form_state['context'])) {
    $product = $form_state['default_product'];

    $commerce_option_list = array();
    foreach ($form_state['commerce_option'] as $field_name => $field) {
      foreach ($field as $delta => $item) {
        $option = $item['option'];
        field_attach_submit('commerce_option', $option, $form[$field_name][$delta], $form_state);
        $option->field_name = $field_name;
        $option->field_delta = $delta;
        $option->product_id = $product->product_id;
        $commerce_option_list[] = $option;
      }
    }
    // First create a pseudo product line item that we will pass to Rules.
    $line_item = commerce_product_line_item_new($product);
    $line_item->data['commerce_option_list'] = $commerce_option_list;
    // Allow modules to prepare this as necessary.
    drupal_alter('commerce_product_calculate_sell_price_line_item', $line_item);
    // Pass the line item to Rules.
    rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
    $product->commerce_price = $line_item->commerce_unit_price;
    $product->display_context = $form_state['context'];
    // ajax id important for ajax to pinpoint changes.
    $ajax_id = 'display-price-medidf-' . $form['#form_id'];
    $new_price = '<div id="' . $ajax_id . '" class="form-item form-type-item">
        <label>Size/Price </label>'
            . commerce_currency_format($product->commerce_price[LANGUAGE_NONE][0]['amount'], $product->commerce_price[LANGUAGE_NONE][0]['currency_code'])
            . '</div>';
    $commands[] = ajax_command_replace('#' . $form['display_price']['#id'], $new_price);
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * d) set payment method names for display on the checkout review page.
 */
function medidf_commerce_payment_method_info() {
  $payment_methods['paypal_wpp'] = array(
      'display_title' => t('PayPal'),
  );
  return $payment_methods;
}

/**
 * e) set final form submit text so it is clear the credit card is about to charged.
 */
function medidf_commerce_checkout_page_info_alter(&$pages) {
  if (!empty($pages['review'])) {
    $pages['review']['submit_value'] = t('Complete your purchase');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function medidf_form_commerce_checkout_form_checkout_alter(&$form, &$form_state) {
  module_load_include('inc', 'medidf_rules', 'medidf_rules.rules');
  $order = $form_state['order'];

  // Only include the donations pane if the order contains a bracelet.
  if (!order_contains_product_type($order, 'bracelets')) {
    $form['commerce_fieldgroup_pane__group_additional_information']['#access'] = FALSE;
  }

  if (!empty($form['commerce_fieldgroup_pane__group_additional_information'])) {
    // Remove the form item for ADA affiliate purchases and display ADA message.
    if (!empty($_SESSION['aff_flag']) && $_SESSION['aff_flag'] == MEDIDF_ADA_AFFILIATE_ID) {
      $donation_form = &$form['commerce_fieldgroup_pane__group_additional_information']['field_order_donation'][LANGUAGE_NONE];
      $donation_form['#type'] = 'markup';
      // Load the ADA Stop diabetes block.
      $block = module_invoke('block', 'block_view', '6');
      $donation_form['#markup'] = $block['content'];
    }
    else{
      // Require the field for all other orders.
      $form['commerce_fieldgroup_pane__group_additional_information']['field_order_donation'][LANGUAGE_NONE]['#required'] = TRUE;

      // Unset the AFA option in code since historical values may contain this value and Drupal UI won't let you remove.
      unset($form['commerce_fieldgroup_pane__group_additional_information']['field_order_donation'][LANGUAGE_NONE]['#options']["Alzheimer's Foundation of America'"]);
    }
  }
}



/**
 *  Implements hook_form_alter().
 */
function medidf_form_commerce_stamps_com_get_label_form_alter(&$form, &$form_state) {
  // Set the insurance value to match the orders base price (includes engraving)
  $base_price = $form_state['order']->commerce_order_total['und'][0]['data']['components'][0]['price']['amount'];
  $base_price = commerce_currency_amount_to_decimal($base_price, 'USD');
  $form['stamps_wrapper']['insurance_value']['#default_value'] = $base_price;

  // Inform the shipper that the package weight is already included.
  $form['stamps_wrapper']['package_weight']['#suffix'] = '<br /><div><em>' . t('Does not contain packing weight, this will be added automatically.') . '</em></div></div>';
}

/**
 * Implements hook_commerce_stamps_com_get_order_rates_packages_alter().
 */
function medidf_commerce_stamps_com_get_order_rates_packages_alter(&$packages, $order) {
  if (!empty($order) && !empty($order->commerce_line_items)) {

    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Define package weights so that they can be added to the order.
    $shipping_weights = array(
      'Thick Envelope' => '0.06875',
      'Package' => '0.25',
    );

    // If the order is in checkout, check to see if we should alter the package
    // type.
    if ($order->status == 'checkout_shipping') {
      foreach ($packages as $delta => $package) {
        // Set the package type to thick envelope which will be overridden below
        // if the package contains large items.
        $packages[$delta]['PackageType'] = 'Thick Envelope';
        foreach ($order_wrapper->commerce_line_items->value() as $line_item) {
          if (in_array($line_item->type, array_keys(commerce_product_types()))) {
            $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
            $product = $line_item_wrapper->commerce_product;
            if (!empty($product->field_dimensions)) {
              $dimensions = $product->field_dimensions->value();

              // If any of the products have a length >= 8 inches, ship in a package.
              if ($dimensions['length'] >= 8) {
                $packages[$delta]['PackageType'] = 'Package';
              }
            }
          }
        }

        // Add the package weight to the request.
        if (!empty($shipping_weights[$packages[$delta]['PackageType']])) {
          $packages[$delta]['WeightLb'] += $shipping_weights[$packages[$delta]['PackageType']];
        }
      }
    }
  }
}

/**
 * Helper function to return field values.
 * TODO: Use field api functions instead of hard coded array.
 */
function medidf_get_field_values($field) {
  if ($field == 'field_fractions_pricing') {
    return array(
      1 => '1/8',
      2 => '1/4',
      3 => '3/8',
      4 => '1/2',
      5 => '5/8',
      6 => '3/4',
      7 => '7/8',
    );
  }
}

/**
 * Implements hook_commerce_paypal_wps_order_form_data_alter().
 */
function medidf_commerce_paypal_wps_order_form_data_alter(&$data, $order) {
  if (!empty($order->commerce_customer_shipping)) {
    // Add the shipping address override to allow for verified orders.
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $shipping_address = $wrapper->commerce_customer_shipping->commerce_customer_address->value();
    $data['address_override'] = 'true';
    $data['showShippingAddress'] = 'false';
    $data['first_name'] = $shipping_address['first_name'];
    $data['last_name'] = $shipping_address['last_name'];
    $data['address1'] = $shipping_address['thoroughfare'];
    $data['address2'] = $shipping_address['premise'];
    $data['city'] = $shipping_address['locality'];
    $data['country'] = $shipping_address['country'];
    $data['state'] = $shipping_address['administrative_area'];
    $data['zip'] = $shipping_address['postal_code'];
  }
}

/*
 * Function to build cart widget.
 */
function medidf_cart_widget() {
  $count = 0;
  $items = '';
  $total = 0;
  $options = array(
    'attributes' => array(),
    'html' => TRUE,
  );
  global $user;
  $order = commerce_cart_order_load($user->uid);
  if (!empty($order->commerce_line_items)) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      if (in_array($line_item_wrapper->type->value(), array_keys(commerce_product_line_item_types()))) {
        $count++;
        try {
          $total += $line_item_wrapper->commerce_total->amount->value();
        }
        catch (EntityFieldQueryException $ex) {}
        // Format total
        $total = commerce_currency_format($total, commerce_default_currency());
        $items = 'Cart(' . $count . ')';
        $output = '<i class="fa fa-shopping-cart"></i> <div class="cart-items">' . $items . '</div> - <div clss="cart-total">' . $total . '</div>';
        $output = '<div class="cart-widget">' . $output . '</div>';
        $output = l($output, 'cart', $options);
      }
    }
  }
  else {
    $output = '<div class="cart-widget"><p>Your cart is empty.</p></div>';
  }
  return $output;
}


/*
 * Implements hook_block_info().
 */
function medidf_block_info() {
 // This example comes from node.module.
 $blocks['cart_widget'] = array(
   'info' => t('Cart Widget'),
 );
 return $blocks;
}

/*
 * Implements hook_block_view().
 */
function medidf_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'cart_widget':
      $block['subject'] = t('Cart Widget');
      $block['content'] = medidf_cart_widget();
      break;
  }
  return $block;
}
