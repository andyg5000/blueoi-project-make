diff -uprb a/commerce_post_affiliate_pro.admin.inc b/commerce_post_affiliate_pro.admin.inc
--- commerce_post_affiliate_pro.admin.inc	2015-07-20 10:33:16.000000000 -0400
+++ commerce_post_affiliate_pro.admin.inc	2015-07-30 15:48:39.000000000 -0400
@@ -10,7 +10,7 @@
  */
 function commerce_post_affiliate_pro_admin_manage() {
   $form['pap_link'] = array(
-    '#markup' => t("Your direct link to ") . "<a href=\"" . variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . "merchants/\" target=\"_blank\">Post Affiliate Pro server</a>.",
+	  '#markup' => t("Your direct link to ") . "<a href=\"".  variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . "merchants/\" target=\"_blank\">Post Affiliate Pro server</a>."
   );

   $form['commerce_post_affiliate_pro_merchant_username'] = array(
@@ -34,15 +34,7 @@ function commerce_post_affiliate_pro_adm
     '#default_value' => variable_get('commerce_post_affiliate_pro_merchant_password', 'demo'),
   );

-  $form['affiliate_user'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Affiliate user settings'),
-    '#weight' => 5,
-    '#collapsible' => TRUE,
-    '#collapsed' => FALSE,
-  );
-
-  $form['affiliate_user']['commerce_post_affiliate_pro_affiliate_activated'] = array(
+	$form['commerce_post_affiliate_pro_affiliate_activated'] = array(
     '#type' => 'radios',
     '#title' => t('Collect affiliate registration details on user form.'),
     '#description' => t('Should the affiliate registration details be collected on user edit and registration forms.'),
@@ -54,23 +46,7 @@ function commerce_post_affiliate_pro_adm
     '#default_value' => variable_get('commerce_post_affiliate_pro_affiliate_activated', COMMERCE_POST_AFFILIATE_PRO_NONE),
   );

-  $form['affiliate_user']['commerce_post_affiliate_pro_affiliate_auto_login'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Automatically login user on Post Affiliate Pro.'),
-    '#default_value' => variable_get('commerce_post_affiliate_pro_affiliate_auto_login', FALSE),
-  );
-  $form['affiliate_user']['commerce_post_affiliate_pro_affiliate_auto_login_roles'] = array(
-    '#type' => 'checkboxes',
-    '#options' => user_roles(),
-    '#title' => t('Enable autologin for following roles'),
-    '#states' => array(
-      'invisible' => array(
-        ':input[name="commerce_post_affiliate_pro_affiliate_auto_login"]' => array('checked' => FALSE),
-      ),
-    ),
-    '#default_value' => variable_get('commerce_post_affiliate_pro_affiliate_auto_login_roles', array()),
-  );
-  $form['affiliate_user']['commerce_post_affiliate_pro_merchant_url_prefix'] = array(
+	$form['commerce_post_affiliate_pro_merchant_url_prefix'] = array(
     '#type' => 'textfield',
     '#title' => t("Merchant's Affiliate website URL link"),
     '#description' => t("Merchant's Affiliate website URL link at Post Affiliate Pro, please replace default value with your own link with slash '/' at the end. eg. <em>Example: http://demo.qualityunit.com/pax4/</em> or <em>http://MY-INSTALATION-OF-PAP.postaffiliatepro.com/</em>"),
@@ -131,8 +107,7 @@ function commerce_post_affiliate_pro_rep
   // send request
   try {
     $request->sendNow();
-  }
-  catch(Exception$e) {
+	} catch(Exception $e) {
     drupal_set_message(t("API call error: %error", array('%error' => $e->getMessage())), 'error');
     watchdog('commerce_post_affiliate_pro', "API call error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
     return t('An error occurred during processing');
@@ -148,7 +123,7 @@ function commerce_post_affiliate_pro_rep
     array('data' => t('Date'), 'field' => 'dateinserted', 'sort' => 'desc'),
     array('data' => t('Name'), 'field' => 'username'),
     array('data' => t('Product')),
-    array('data' => t('Total'), 'field' => 'totalcost', 'sort' => 'desc'),
+    array('data' => t('Total'), 'field' => 'totalcost', 'sort' => 'desc')
   );

   $rows = array();
@@ -161,7 +136,7 @@ function commerce_post_affiliate_pro_rep
     $rows[] = array(
       array('data' => $rec->get('orderid')),
       array('data' => $rec->get('dateinserted')),
-      array('data' => check_plain($rec->get('firstname') . ' ' . $rec->get('lastname') . ' (' . $rec->get('username') . ')')),
+      array('data' => check_plain($rec->get('firstname') . ' ' . $rec->get('lastname') . ' (' . $rec->get('username'). ')')),
       array('data' => $rec->get('data1')),
       array('data' => $rec->get('totalcost')),
     );
@@ -172,6 +147,7 @@ function commerce_post_affiliate_pro_rep
   }

   return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('commerce-post-affiliate-pro-data'))));
+
 }

 /*
@@ -181,7 +157,7 @@ function commerce_post_affiliate_pro_rep

   $pap_session_merchant = commerce_post_affiliate_pro_get_session();

-  if (isset($_REQUEST['order'])) {
+  if(isset($_REQUEST['order'])) {
     // order by handling
     switch ($_REQUEST['order']) {
       case t('UserId'):
@@ -225,8 +201,7 @@ function commerce_post_affiliate_pro_rep
   // send request
   try {
     $payoutRequest->sendNow();
-  }
-  catch(Exception$e) {
+	} catch(Exception $e) {
     drupal_set_message(t("API call error: %error", array('%error' => $e->getMessage())), 'error');
     watchdog('commerce_post_affiliate_pro', "API call error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
     return t('An error occurred during processing');
@@ -239,7 +214,7 @@ function commerce_post_affiliate_pro_rep
     array('data' => t('UserId')),
     array('data' => t('Name'), 'field' => 'username'),
     array('data' => t('Commission')),
-    array('data' => t('Amount')),
+    array('data' => t('Amount'))
   );

   $rows = array();
@@ -252,7 +227,7 @@ function commerce_post_affiliate_pro_rep

     $rows[] = array(
       array('data' => $rec->get('id')),
-      array('data' => check_plain($rec->get('firstname') . ' ' . $rec->get('lastname') . ' (' . $rec->get('username') . ')')),
+      array('data' => check_plain($rec->get('firstname') . ' ' . $rec->get('lastname') . ' (' . $rec->get('username'). ')')),
       array('data' => $rec->get('commission')),
       array('data' => $rec->get('amounttopay')),
     );
@@ -271,7 +246,7 @@ function commerce_post_affiliate_pro_rep
 function commerce_post_affiliate_pro_affiliates() {
   $pap_session_merchant = commerce_post_affiliate_pro_get_session();

-  if (isset($_REQUEST['order'])) {
+	if(isset($_REQUEST['order'])) {
     // order by handling
     switch ($_REQUEST['order']) {
       case t('UserId'):
@@ -325,8 +300,7 @@ function commerce_post_affiliate_pro_aff
   // send request
   try {
     $request->sendNow();
-  }
-  catch(Exception$e) {
+	} catch(Exception $e) {
     drupal_set_message(t("API call error: %error", array('%error' => $e->getMessage())), 'error');
     watchdog('commerce_post_affiliate_pro', "API call error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
     return t('An error occurred during processing');
@@ -354,8 +328,8 @@ function commerce_post_affiliate_pro_aff
   foreach ($recordset as $rec) {
     $rows[] = array(
       array('data' => $rec->get('userid')),
-      array('data' => check_plain($rec->get('firstname') . ' ' . $rec->get('lastname') . ' (' . $rec->get('username') . ')')),
-      array('data' => $states[$rec->get('rstatus')]),
+      array('data' => check_plain($rec->get('firstname') . ' ' . $rec->get('lastname') . ' (' . $rec->get('username'). ')')),
+      array('data' => $states[$rec->get('rstatus')])
     );
   }

@@ -372,7 +346,7 @@ function commerce_post_affiliate_pro_aff
 */
 function commerce_post_affiliate_pro_affiliate_report($account) {
   $pap_session_merchant = commerce_post_affiliate_pro_get_session();
-  if (isset($_REQUEST['order'])) {
+	if(isset($_REQUEST['order'])) {
     // order by handling
     switch ($_REQUEST['order']) {
       case t('Date'):
@@ -403,8 +377,7 @@ function commerce_post_affiliate_pro_aff
   if (isset($_REQUEST['sort'])) {
     if ($_REQUEST['sort'] == 'asc') {
       $ascending = TRUE;
-    }
-    else {
+		} else {
       $ascending = FALSE;
     }
   }
@@ -424,8 +397,7 @@ function commerce_post_affiliate_pro_aff
   // send request
   try {
     $request->sendNow();
-  }
-  catch(Exception$e) {
+	} catch(Exception $e) {
     drupal_set_message(t("API call error: %error", array('%error' => $e->getMessage())), 'error');
     watchdog('commerce_post_affiliate_pro', "API call error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
     return t('An error occurred during processing');
@@ -441,7 +413,7 @@ function commerce_post_affiliate_pro_aff
     array('data' => t('Date'), 'field' => 'dateinserted', 'sort' => 'desc'),
     array('data' => t('Name'), 'field' => 'username'),
     array('data' => t('Product')),
-    array('data' => t('Total'), 'field' => 'totalcost', 'sort' => 'desc'),
+    array('data' => t('Total'), 'field' => 'totalcost', 'sort' => 'desc')
   );

   $rows = array();
@@ -454,7 +426,7 @@ function commerce_post_affiliate_pro_aff
     $rows[] = array(
       array('data' => $rec->get('orderid')),
       array('data' => $rec->get('dateinserted')),
-      array('data' => check_plain($rec->get('firstname') . ' ' . $rec->get('lastname') . ' (' . $rec->get('username') . ')')),
+      array('data' => check_plain($rec->get('firstname') . ' ' . $rec->get('lastname') . ' (' . $rec->get('username'). ')')),
       array('data' => $rec->get('data1')),
       array('data' => $rec->get('totalcost')),
     );
@@ -466,4 +438,3 @@ function commerce_post_affiliate_pro_aff

   return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('commerce-post-affiliate-pro-data'))));
 }
-
diff -uprb a/commerce_post_affiliate_pro.info b/commerce_post_affiliate_pro.info
--- commerce_post_affiliate_pro.info	2015-07-20 10:34:02.000000000 -0400
+++ commerce_post_affiliate_pro.info	2015-07-30 15:48:39.000000000 -0400
@@ -10,9 +10,9 @@ dependencies[] = "rules"
 core = "7.x"


-; Information added by Drupal.org packaging script on 2015-07-20
+; Information added by drupal.org packaging script on 2012-03-21
 version = "7.x-1.x-dev"
 core = "7.x"
 project = "commerce_post_affiliate_pro"
-datestamp = "1437402842"
+datestamp = "1332331679"

diff -uprb a/commerce_post_affiliate_pro.install b/commerce_post_affiliate_pro.install
--- commerce_post_affiliate_pro.install	2015-07-20 10:33:16.000000000 -0400
+++ commerce_post_affiliate_pro.install	2015-07-30 15:48:39.000000000 -0400
@@ -43,7 +43,7 @@ function commerce_post_affiliate_pro_sch

 /**
  * Implements hook_requirements
- */
+*/
 function commerce_post_affiliate_pro_requirements($phase) {
   $requirements = array();
   // Ensure translations don't break at install time
@@ -56,18 +56,16 @@ function commerce_post_affiliate_pro_req
     $path = libraries_get_path('pap');
   }
   $pap_status    = $t('Not Found');
-  $download_link = variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . 'scripts/server.php?C=Gpf_Api_DownloadAPI&M=download&FormRequest=Y&FormResponse=Y';
+	$download_link = variable_get('commerce_post_affiliate_pro_merchant_url_prefix','http://demo.qualityunit.com/pax4/') . 'scripts/server.php?C=Gpf_Api_DownloadAPI&M=download&FormRequest=Y&FormResponse=Y';
   $additional    = array(
     'description' => $t('Your server does not have the PapApi class. Please <a href="!url" target="_blank">download the file</a> and copy it to sites/all/libraries/pap/PapApi.class.php', array('!url' => $download_link)),
-    'severity' => REQUIREMENT_ERROR,
+		'severity' => REQUIREMENT_ERROR
   );
-  if (file_exists($path . '/PapApi.class.php')) {
-    require_once ($path . '/PapApi.class.php');
-    $session    = new Gpf_Api_Session(variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . 'scripts/server.php');
-    $pap_status = $session->getAppVersion();
+	if (file_exists($path .'/PapApi.class.php')) {
+		$pap_status = $t('Installed');
     $additional = array(
       'description' => $t('Your server has the PapApi class installed.'),
-      'severity' => REQUIREMENT_OK,
+			'severity' => REQUIREMENT_OK
     );
   }
   $requirements['commerce_post_affiliate_pro_class'] = array(
@@ -79,17 +77,16 @@ function commerce_post_affiliate_pro_req
   return $requirements;
 }

+
 /**
  * Implements hook_uninstall();
- */
+*/
 function commerce_post_affiliate_pro_uninstall() {
   $variables = array('commerce_post_affiliate_pro_merchant_url_prefix',
     'commerce_post_affiliate_pro_affiliate_activated',
     'commerce_post_affiliate_pro_merchant_username',
-    'commerce_post_affiliate_pro_merchant_password',
-  );
+										 'commerce_post_affiliate_pro_merchant_password');
   foreach ($variables as $variable) {
     variable_del($variable);
   }
 }
-
diff -uprb a/commerce_post_affiliate_pro.module b/commerce_post_affiliate_pro.module
--- commerce_post_affiliate_pro.module	2015-07-20 10:33:16.000000000 -0400
+++ commerce_post_affiliate_pro.module	2015-07-30 15:48:39.000000000 -0400
@@ -11,40 +11,42 @@

 /******************************************************************************
  * Constants
- *******************************************************************************/
+*******************************************************************************/
 define('COMMERCE_POST_AFFILIATE_PRO_MANUAL', 1);
 define('COMMERCE_POST_AFFILIATE_PRO_AUTOMATIC', -1);
 define('COMMERCE_POST_AFFILIATE_PRO_NONE', 0);

 /******************************************************************************
  * Core Hooks
- *******************************************************************************/
+*******************************************************************************/

 /**
- * Implements hook_help();
- */
+* Implements hook_help();
+*/
 function commerce_post_affiliate_pro_help($path, $arg) {
   $output = '';
   switch ($path) {
     case "admin/help#commerce_post_affiliate_pro":

-      $output .= t("This module is for merchants (eshop owners) who want to increase their income using external affiliate application.");
+			$output .= t("This module is for merchants (eshop owners) who want to increase their income using external affiliate application.") ;
       $output .= t('Merchant needs to have valid account at <a href="@url" target="_blank" title="Post Affiliate Pro">Post Affiliate Pro</a> or can try \'demo\' account,
-			that you get by default after Post affiliate Pro (PAP) module installation.', array('@url' => 'http://www.qualityunit.com/postaffiliatepro/#drupal'));;
+			that you get by default after Post affiliate Pro (PAP) module installation.', array('@url' => 'http://www.qualityunit.com/postaffiliatepro/#drupal')); ;

-      $output .= t("With this account you can test all available functions of this module.");
+			$output .= t("With this account you can test all available functions of this module.") ;

       $output .= t("<strong>List of current functions:</strong>
 						<li>merchant's connection to PAP server with settings form</li>
 						<li>report of orders for merchant</li>
 						<li>report of payouts for merchant</li>
 						<li>report of payouts for affiliates</li>
-						<li>available registration for users as affiliates</li>");
+						<li>available registration for users as affiliates</li>") ;

       $output .= t("<strong>If you don't get PAP reports you need to check:</strong>
 						<li>you have configured correct username / password and link to your account on PAP server</li>
 						<li>you have enabled JavaScript in your browser</li>
 						<li>you don't have have any JavaScript error caused with other modules and functions</li>");
+
+
       break;
   }
   return $output;
@@ -56,28 +58,28 @@ function commerce_post_affiliate_pro_hel
 function commerce_post_affiliate_pro_permission() {
   return array(
     'register pap affiliate' => array(
-      'title' => t('Register PAP Affiliate'),
+			'title' => t('Register PAP Affiliate')
     ),
     'administer commerce_post_affiliate_pro' => array(
-      'title' => t('Administer Commerce PAP'),
+			'title' => t('Administer Commerce PAP')
     ),
     'access all post affiliate pro user reports' => array(
       'title' => t('Access all post affiliate pro reports for all users'),
-      'description' => t('Note this permission should only be granted to super users.'),
+			'description' => t('Note this permission should only be granted to super users.')
     ),
     'access own post affiliate pro user reports' => array(
-      'title' => t('Access own post affiliate pro user reports'),
+			'title' => t('Access own post affiliate pro user reports')
     ),
     'exclude from page tracking' => array(
       'title' => t('Exclude from PAP page tracking'),
-      'description' => t('Exclude from PAP tracking - note user 1 is excluded by default.'),
-    ),
+			'description' => t('Exclude from PAP tracking - note user 1 is excluded by default.')
+		)
   );
 }

 /**
- * Implements hook_menu();
- */
+* Implements hook_menu();
+*/
 function commerce_post_affiliate_pro_menu() {
   $items = array();

@@ -91,7 +93,7 @@ function commerce_post_affiliate_pro_men
     'page arguments' => array('commerce_post_affiliate_pro_admin_manage'),
     'access arguments' => $access,
     'file' => 'commerce_post_affiliate_pro.admin.inc',
-    'type' => MENU_NORMAL_ITEM,
+		'type' => MENU_NORMAL_ITEM
   );

   $items['admin/commerce/config/post-affiliate-pro/settings'] = array(
@@ -115,7 +117,7 @@ function commerce_post_affiliate_pro_men
     'file' => 'commerce_post_affiliate_pro.admin.inc',
     'access arguments' => $access,
     'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
-    'weight' => -6,
+		'weight' => -6
   );

   $items['admin/commerce/config/post-affiliate-pro/affiliates'] = array(
@@ -159,13 +161,13 @@ function commerce_post_affiliate_pro_blo
   return array(
     'register' => array(
       'info' => t('Register new Affiliate'),
-    ),
+		)
   );
 }

 /**
  * Implements hook_block_view();
- */
+*/
 function commerce_post_affiliate_pro_block_view($delta) {
   $block = array();
   if ($delta == 'register') {
@@ -175,27 +177,27 @@ function commerce_post_affiliate_pro_blo
 }

 /**
- * Implements hook_page_build().
- * Add the PAP click tracking
- */
+* Implements hook_page_build().
+* Add the PAP click tracking
+*/
 function commerce_post_affiliate_pro_page_build(&$page) {
   if (!user_access('exclude from page tracking')) {
-    $page['page_bottom']['commerce_post_affiliate_pro'] = array(
+		$page['page_bottom']['commerce_post_affiliate_pro']= array(
       '#type' => 'markup',
       '#markup' => '<script type="text/javascript"><!--
-				// -->
-				document.write(unescape("%3Cscript id=\'pap_x2s6df8d\' src=\'" + (("https:" == document.location.protocol) ? "https://" : "http://") + "' . ltrim(ltrim(variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/'), 'http://'), 'https://') . 'scripts/trackjs.js\' type=\'text/javascript\'%3E%3C/script%3E"));
+				document.write(unescape("%3Cscript id=\'pap_x2s6df8d\' src=\'" + (("https:" == document.location.protocol) ? "https://" : "http://") + "'. ltrim(ltrim(variable_get('commerce_post_affiliate_pro_merchant_url_prefix','http://demo.qualityunit.com/pax4/'), 'http://'), 'https://') .'scripts/trackjs.js\' type=\'text/javascript\'%3E%3C/script%3E"));//-->
 				</script>
 				<script type="text/javascript"><!--
 				try {
 				PostAffTracker.track();
 				} catch (err) { }
 				//-->
-				</script>',
+				</script>'
     );
   }
 }

+
 /**
  * Implementation of hook_form_FORM_ID_alter().
  */
@@ -204,9 +206,9 @@ function commerce_post_affiliate_pro_for
     $account = $form['#user'];
     // Only if we have this feature enabled
     $signup_status = variable_get('commerce_post_affiliate_pro_affiliate_activated', 0);
-    if (in_array($signup_status, array(COMMERCE_POST_AFFILIATE_PRO_MANUAL, COMMERCE_POST_AFFILIATE_PRO_AUTOMATIC))) {
+		if(in_array($signup_status, array(COMMERCE_POST_AFFILIATE_PRO_MANUAL, COMMERCE_POST_AFFILIATE_PRO_AUTOMATIC))) {
       // affiliate exists in DB
-      if ($account->affiliate_username && $signup_status == COMMERCE_POST_AFFILIATE_PRO_MANUAL) {
+			if($account->affiliate_username && $signup_status == COMMERCE_POST_AFFILIATE_PRO_MANUAL) {

         $affiliate = commerce_post_affiliate_pro_load_affiliate($account->affiliate_username);
         if (empty($affiliate)) {
@@ -254,6 +256,7 @@ function commerce_post_affiliate_pro_for
           '#title' => t("Affiliate's password"),
           '#description' => t("Affiliate's password on Post Affiliate Pro server. If it is empty, value will be not updated on PAP server."),
         );
+
       }
       else {
         // affiliate needs to be registered
@@ -261,12 +264,12 @@ function commerce_post_affiliate_pro_for
           '#type' => 'fieldset',
           '#title' => t('Register new Affiliate account on Post Affiliate Pro server'),
           '#collapsible' => TRUE,
-          '#weight' => 5,
+					'#weight' => 5
         );

         $form['post_affiliate_user_settings']['pap_link'] = array(
           '#type' => 'item',
-          '#value' => t("This form creates an affiliate account on <a href=\"%s\" target=\"_blank\">Post Affiliate Pro server</a>. You can earn money for every sell you mediate.", array('%s' => 'http://www.qualityunit.com/postaffiliatepro/#drupal')),
+					'#value' => t("This form creates an affiliate account on <a href=\"%s\" target=\"_blank\">Post Affiliate Pro server</a>. You can earn money for every sell you mediate.", array('%s' => 'http://www.qualityunit.com/postaffiliatepro/#drupal'))
         );

         $form['post_affiliate_user_settings']['affiliate_username'] = array(
@@ -306,21 +309,21 @@ function commerce_post_affiliate_pro_use

 /**
  * Implements hook_form_FORM_ID_alter();
- */
+*/
 function commerce_post_affiliate_form_user_register_form_alter(&$form, &$form_state) {
   // Modify the user register form to collect affiliate details
   $signup_status = variable_get('commerce_post_affiliate_pro_affiliate_activated', 0);
-  if ($signup_status == COMMERCE_POST_AFFILIATE_PRO_MANUAL) {
+	if($signup_status == COMMERCE_POST_AFFILIATE_PRO_MANUAL) {
     $form['post_affiliate_user_settings'] = array(
       '#type' => 'fieldset',
       '#title' => t('Register new Affiliate account on Post Affiliate Pro server'),
       '#collapsible' => TRUE,
-      '#weight' => 5,
+			'#weight' => 5
     );

     $form['post_affiliate_user_settings']['pap_link'] = array(
       '#type' => 'item',
-      '#value' => t("This form creates an affiliate account on <a href=\"%s\" target=\"_blank\">Post Affiliate Pro server</a>. You can earn money for every sell you mediate.", 'http://www.qualityunit.com/postaffiliatepro/#drupal'),
+			'#value' => t("This form creates an affiliate account on <a href=\"%s\" target=\"_blank\">Post Affiliate Pro server</a>. You can earn money for every sell you mediate.", 'http://www.qualityunit.com/postaffiliatepro/#drupal')
     );

     $form['post_affiliate_user_settings']['affiliate_username'] = array(
@@ -332,7 +335,7 @@ function commerce_post_affiliate_form_us
     $form['post_affiliate_user_settings']['affiliate_password'] = array(
       '#type' => 'password',
       '#title' => t("Affiliate password"),
-      '#description' => t("Password on Post Affiliate Pro server, can be used the same as password from this website. If it is empty, affiliate account will be not created on PAP server."),
+			'#description' => t("Password on Post Affiliate Pro server, can be used the same as password from this website. If it is empty, affiliate account will be not created on PAP server.")
     );

     $form['post_affiliate_user_settings']['affiliate_refid'] = array(
@@ -345,13 +348,12 @@ function commerce_post_affiliate_form_us

 /**
  * Implements hook_user_insert();
- */
+*/
 function commerce_post_affiliate_pro_user_insert(&$edit, $account, $category) {
   if ($category == 'account') {
     $signup_status = variable_get('commerce_post_affiliate_pro_affiliate_activated', 0);
     if ($signup_status == COMMERCE_POST_AFFILIATE_PRO_MANUAL &&
-      $edit['affiliate_username'] && $edit['affiliate_password'] && $edit['affiliate_refid']
-    ) {
+				$edit['affiliate_username'] && $edit['affiliate_password'] && $edit['affiliate_refid']) {
       // inserting new affiliate
       commerce_post_affiliate_pro_register_affiliate($edit, $account);
     }
@@ -367,15 +369,14 @@ function commerce_post_affiliate_pro_use

 /**
  * Implements hook_user_update();
- */
+*/
 function commerce_post_affiliate_pro_user_update(&$edit, $account, $category) {
   // Use empty because 0 is invalid for any of these fields.
   if (!empty($edit['affiliate_username']) && !empty($edit['affiliate_password']) && !empty($edit['affiliate_refid'])) {
     // inserting new affiliate
     commerce_post_affiliate_pro_register_affiliate($edit, $account);
   }
-  // update existing affiliate account
-  elseif (!empty($edit['affiliate_password']) && !isset($edit['affiliate_username'])) {
+	elseif (!empty($edit['affiliate_password']) && !isset($edit['affiliate_username'])) { // update existing affiliate account
     // update password
     commerce_post_affiliate_pro_update_affiliate($edit, $account);
   }
@@ -383,18 +384,17 @@ function commerce_post_affiliate_pro_use

 /**
  * Implements hook_user_view
- */
+*/
 function commerce_post_affiliate_pro_user_view($account, $view_mode, $langcode) {
   if ($account->uid && commerce_post_affiliate_pro_access($account)
-    && !empty($account->affiliate_username)
-  ) {
+			&& !empty($account->affiliate_username)) {
     $account->content['commerce_post_affiliate_pro_affiliate_report'] = array(
       '#type' => 'user_profile_category',
       '#weight' => -5,
       '#title' => t("Report of Affiliate's transactions"),
       'link' => array(
         '#type' => 'user_profile_item',
-        '#value' => l(t('Click here to view your transactions on Post Affiliate Pro server.'), 'user/' . $account->uid . '/affiliate_report'),
+				'#value' => l(t('Click here to view your transactions on Post Affiliate Pro server.'), 'user/'. $account->uid .'/affiliate_report')
       ),
     );
   }
@@ -402,42 +402,37 @@ function commerce_post_affiliate_pro_use

 /******************************************************************************
  * Access callbacks
- *******************************************************************************/
-
+*******************************************************************************/
 /**
  * Access function to check user has access to the post affiliate pro report
- *
  * @param $account;
- */
+*/
 function commerce_post_affiliate_pro_access($account) {
   global $user;
   return (user_access('access all post affiliate pro user reports') ||
-    (user_access('access own post affiliate pro user reports') && $account->uid == $user->uid)
-  );
+					(user_access('access own post affiliate pro user reports') && $account->uid == $user->uid));
 }

 /******************************************************************************
  * Theme functions
- *******************************************************************************/
+*******************************************************************************/

 /**
  * Default implementation of theme_commerce_post_affiliate_pro_register_block
- */
+*/
 function theme_commerce_post_affiliate_pro_register_block($variables) {
   $result = t("If you want to become our new affiliate, click on link below. It's free!") . '<br/>';
-  $result .= '<a href="' . variable_get('commerce_post_affilate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . 'affiliates/signup.php#SignupForm" target="_blank">' . t('Affiliate Registration') . '</a><br/><br/>' . "\n";
+	$result .= '<a href="'. variable_get('commerce_post_affilate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') .'affiliates/signup.php#SignupForm" target="_blank">'. t('Affiliate Registration').'</a><br/><br/>'."\n";
   $result .= t('If you already have account as affiliate, you can check out your reports here:') . "<br/>\n";
-  $result .= '<a href="' . variable_get('commerce_post_affilate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . 'affiliates/login.php#login" target="_blank">' . t('Affiliate Login') . '</a>' . "\n";
+	$result .= '<a href="'. variable_get('commerce_post_affilate_pro_merchant_url_prefix','http://demo.qualityunit.com/pax4/') .'affiliates/login.php#login" target="_blank">'. t('Affiliate Login').'</a>'."\n";
   return $result;
 }

 /******************************************************************************
  * Module/API functions
- *******************************************************************************/
-
+*******************************************************************************/
 /**
  * Load the use
- *
  * @param $account object user object
  */
 function commerce_post_affiliate_pro_user_load_affiliate(&$account) {
@@ -450,6 +445,7 @@ function commerce_post_affiliate_pro_use
   return $account;
 }

+
 /**
  * Register new Affiliate on PAP server
  */
@@ -470,16 +466,16 @@ function commerce_post_affiliate_pro_reg

       // add record in DB
       db_query("INSERT INTO {uc_pap_affiliates} (affiliate_id, uid, affiliate_username) VALUES (0, %d, '%s')", $account->uid, $edit['affiliate_username']);
-    }
-    else {
+
+		} else {
       drupal_set_message(t("Cannot register pap affiliate. Message: %error", array('%error' => $affiliate->getMessage())), 'error');
     }
-  }
-  catch(Exception$e) {
+	} catch (Exception $e) {
     drupal_set_message(t("Error while communicating with PAP: %error", array('%error' => $e->getMessage())), 'error');
   }
 }

+
 /**
  * Load Affiliate's data from PAP server
  */
@@ -491,8 +487,7 @@ function commerce_post_affiliate_pro_loa
   $affiliate->setUsername($affiliate_username);
   try {
     $affiliate->load();
-  }
-  catch(Exception$e) {
+	} catch (Exception $e) {
     drupal_set_message(t("Cannot load record: %error", array('%error' => $affiliate->getMessage())), 'error');
     watchdog('commerce_post_affiliate_pro', "Load user error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
     return $affiliate_data;
@@ -520,14 +515,13 @@ function commerce_post_affiliate_pro_upd
   $affiliate->setUsername($account->affiliate_username);
   try {
     $affiliate->load();
-  }
-  catch(Exception$e) {
+	} catch (Exception $e) {
     drupal_set_message(t("Error saving affiliate record: %error", array('%error' => $affiliate->getMessage())), 'error');
     watchdog('commerce_post_affiliate_pro', "Error saving affiliate error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
     return;
   }

-  if ($edit['affiliate_password']) {
+	if($edit['affiliate_password']) {
     $affiliate->setPassword($edit['affiliate_password']);
     try {
       if ($affiliate->save()) {
@@ -538,8 +532,7 @@ function commerce_post_affiliate_pro_upd
         watchdog('commerce_post_affiliate_pro', "Error saving affiliate error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
         return;
       }
-    }
-    catch(Exception$e) {
+		} catch (Exception $e) {
       drupal_set_message(t("Error while communicating with PAP: %error", array('%error' => $e->getMessage())), 'error');
       watchdog('commerce_post_affiliate_pro', "Error saving affiliate error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
       return;
@@ -554,7 +547,7 @@ function commerce_post_affiliate_pro_aff
   return array(
     'A' => t('Approved'),
     'P' => t('Pending'),
-    'D' => t('Declined'),
+		'D' => t('Declined')
   );
 }

@@ -566,51 +559,17 @@ function commerce_post_affiliate_pro_get
   if ($pap_session_merchant == NULL) {
     // merchant login
     $path = libraries_get_path('pap');
-    require_once ($path . '/PapApi.class.php');
+		require_once($path . '/PapApi.class.php');
     module_load_include('php', 'commerce_post_affiliate_pro', 'DrupalPapApi.class');

-    $pap_session_merchant = new Drupal_Gpf_Api_Session(variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . "scripts/server.php");
+		$pap_session_merchant = new Drupal_Gpf_Api_Session(variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/'). "scripts/server.php");
     if (!$pap_session_merchant->login(variable_get('commerce_post_affiliate_pro_merchant_username', 'merchant@example.com'),
-        variable_get('commerce_post_affiliate_pro_merchant_password', 'demo')
-      )) {
+																		 variable_get('commerce_post_affiliate_pro_merchant_password', 'demo'))) {
       drupal_set_message(t("Cannot login. Message: @error", array('@error' => $pap_session_merchant->getMessage())), 'error');
-      watchdog('commerce_post_affiliate_pro', "API login error: @error", array('@error' => $pap_session_merchant->getMessage()), WATCHDOG_CRITICAL);
+      watchdog('commerce_post_affiliate_pro', "API login error: @error", array('@error' => $e->getMessage()), WATCHDOG_CRITICAL);
       // Stuff seriously wrong here so we bail
-      return drupal_not_found();
+			return drupal_page_not_found();
     }
   }
   return $pap_session_merchant;
 }
-
-/**
- * Implements hook_user_login
- */
-function commerce_post_affiliate_pro_user_login(&$edit, $account) {
-  // auto login enabled
-  if (variable_get('commerce_post_affiliate_pro_affiliate_auto_login', FALSE)) {
-    $enabled_roles = variable_get('commerce_post_affiliate_pro_affiliate_auto_login_roles', array());
-    // which roles are enabled
-    $roles = array_intersect(array_keys($account->roles), $enabled_roles);
-    if (!empty($roles)) {
-      // username
-      $username = $account->mail;
-      $password = $edit['values']['pass'];
-      // load libraries
-      $path = libraries_get_path('pap');
-      require_once ($path . '/PapApi.class.php');
-      module_load_include('php', 'commerce_post_affiliate_pro', 'DrupalPapApi.class');
-      $pap_session_affiliate = new Gpf_Api_Session(variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . "scripts/server.php");
-      if (!$pap_session_affiliate->login($username, $password, Gpf_Api_Session::AFFILIATE)) {
-        drupal_set_message(t("Cannot login to Post Affiliate Pro. Message: @error", array('@error' => $pap_session_affiliate->getMessage())), 'error');
-        watchdog('commerce_post_affiliate_pro', "API login error: @error", array('@error' => $pap_session_affiliate->getMessage()), WATCHDOG_CRITICAL);
-        // Stuff seriously wrong here so we bail
-        return drupal_not_found();
-      }
-      else {
-        $panel_url = $pap_session_affiliate->getUrlWithSessionInfo(variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . 'affiliates/panel.php');
-        drupal_set_message(t("Click !here to access your Post Affiliate Pro control panel.", array('!here' => l('here', $panel_url, array('external' => TRUE)))));
-      }
-    }
-  }
-}
-
