diff -uprb a/commerce_physical.info b/commerce_physical.info
--- commerce_physical.info	2015-09-18 22:59:02.000000000 -0400
+++ commerce_physical.info	2015-07-30 15:48:39.000000000 -0400
@@ -8,9 +8,9 @@ dependencies[] = commerce_product_refere
 dependencies[] = physical
 core = 7.x

-; Information added by Drupal.org packaging script on 2015-09-19
+; Information added by drupal.org packaging script on 2011-10-23
 version = "7.x-1.x-dev"
 core = "7.x"
 project = "commerce_physical"
-datestamp = "1442631542"
+datestamp = "1319371413"

Only in /tmp/hacked-cache-Dustin/hackedProjectWebFilesDownloader/module/commerce_physical/7.x-1.x-dev/commerce_physical/: commerce_physical.inline_conditions.inc
diff -uprb a/commerce_physical.module b/commerce_physical.module
--- commerce_physical.module	2015-09-18 22:57:19.000000000 -0400
+++ commerce_physical.module	2015-07-30 15:48:39.000000000 -0400
@@ -2,95 +2,52 @@

 /**
  * @file
- * API for working with physical product types in Drupal Commerce.
+ * Provides API support for working with physical product types in Drupal Commerce.
  */


 /**
  * Determines the weight field to use for a given entity.
  *
- * @param string $entity_type
+ * @param $entity_type
  *   The type of entity passed to the function.
- * @param object $entity
+ * @param $entity
  *   The actual entity whose weight field name should be determined.
  *
- * @return string
+ * @return
  *   The name of the field to use on the entity to find a weight value or NULL
  *   if none was found.
  */
 function commerce_physical_entity_weight_field_name($entity_type, $entity) {
-
-  $field_name = commerce_physical_entity_field_name($entity_type, $entity, 'physical_weight');
-
-  // Allow other modules to specify a different field name.
-  drupal_alter('commerce_physical_entity_weight_field_name', $field_name, $entity_type, $entity);
-
-  return $field_name;
-}
-
-/**
- * Determines the dimensions field to use for a given entity.
- *
- * @param string $entity_type
- *   The type of entity passed to the function.
- * @param object $entity
- *   The actual entity whose weight field name should be determined.
- *
- * @return string
- *   The name of the field to use on the entity to find a weight value or NULL
- *   if none was found.
- */
-function commerce_physical_entity_dimensions_field_name($entity_type, $entity) {
-
-  $field_name = commerce_physical_entity_field_name($entity_type, $entity, 'physical_dimensions');
-
-  // Allow other modules to specify a different field name.
-  drupal_alter('commerce_physical_entity_dimensions_field_name', $field_name, $entity_type, $entity);
-
-  return $field_name;
-}
-
-/**
- * Determines the field of a certain type to use for a given entity.
- *
- * @param string $entity_type
- *   The type of entity passed to the function.
- * @param object $entity
- *   The actual entity whose weight field name should be determined.
- * @param string $field_type
- *   The field type to use.
- *
- * @return string
- *   The name of the field to use on the entity to find a weight value or NULL
- *   if none was found.
- */
-function commerce_physical_entity_field_name($entity_type, $entity, $field_type) {
   $bundle = field_extract_bundle($entity_type, $entity);
   $field_name = NULL;

-  // Look for the first field available for the entity.
+  // Look for the first weight field available for the entity.
   foreach (field_info_instances($entity_type, $bundle) as $instance_name => $instance) {
     // Load the field info for the current instance.
     $field = field_info_field($instance['field_name']);

     // If it's of the proper type...
-    if ($field['type'] == $field_type) {
+    if ($field['type'] == 'physical_weight') {
       // Save its name and exit the loop.
       $field_name = $instance_name;
       break;
     }
   }

+  // Allow other modules to specify a different field name.
+  drupal_alter('commerce_physical_entity_weight_field_name', $field_name, $entity_type, $entity);
+
   return $field_name;
 }

 /**
  * Determines the weight to use for a product line item on an order.
  *
- * @param commerce_line_item $line_item
+ * @param $line_item
  *   A product line item whose weight should be determined.
  *
- * @return array
+ * @return
  *   A weight field value array representing the weight of the product line item
  *   or NULL if none was found.
  */
@@ -124,56 +81,14 @@ function commerce_physical_product_line_
 }

 /**
- * Determines the dimensions of a product line item on an order.
- *
- * @param commerce_line_item $line_item
- *   A product line item whose dimensions should be determined.
- *
- * @return array
- *   An array of dimensions field value arrays. There'll be one entry in the
- *   array per product, with the entry being an array of that product's
- *   dimensions. If this line item contains no products with dimensions, an
- *   empty array will be returned.
- */
-function commerce_physical_product_line_item_dimensions($line_item) {
-  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
-  $dimensions = array();
-
-  // If the line item references a valid product...
-  if (!empty($line_item_wrapper->commerce_product)) {
-    $product = $line_item_wrapper->commerce_product->value();
-
-    if (!empty($product)) {
-      // If the product has a valid dimensions field...
-      $field_name = commerce_physical_entity_dimensions_field_name('commerce_product', $product);
-
-      if (!empty($field_name) && !empty($product->{$field_name})) {
-        $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
-
-        // Add dimension values per product in the line item.
-        for ($i = 0; $i < $line_item_wrapper->quantity->value(); $i++) {
-          $dimensions = $product_wrapper->{$field_name}->value();
-        }
-      }
-    }
-  }
-
-  // Allow other modules to alter the weight if necessary.
-  drupal_alter('commerce_physical_product_line_item_dimensions', $dimensions, $line_item);
-
-  return $dimensions;
-}
-
-
-/**
  * Determines the weight of an entire order.
  *
- * @param commerce_order $order
+ * @param $order
  *   The order object whose weight value should be calculated.
- * @param string $unit
+ * @param $unit
  *   The unit of measurement to use for the returned weight of the order.
  *
- * @return array
+ * @return
  *   A weight field value array representing the total weight of the order using
  *   the specified unit of measurement or NULL if no weight could be determined.
  */
@@ -209,15 +124,86 @@ function commerce_physical_order_weight(


 /**
+ * Determines the dimensions field to use for a given entity.
+ *
+ * @param $entity_type
+ *   The type of entity passed to the function.
+ * @param $entity
+ *   The actual entity whose dimensions field name should be determined.
+ *
+ * @return
+ *   The name of the field to use on the entity to find a dimensions value or
+ *   NULL if none was found.
+ */
+function commerce_physical_entity_dimensions_field_name($entity_type, $entity) {
+  $bundle = field_extract_bundle($entity_type, $entity);
+  $field_name = NULL;
+
+  // Look for the first dimensions field available for the entity.
+  foreach (field_info_instances($entity_type, $bundle) as $instance_name => $instance) {
+    // Load the field info for the current instance.
+    $field = field_info_field($instance['field_name']);
+
+    // If it's of the proper type...
+    if ($field['type'] == 'physical_dimensions') {
+      // Save its name and exit the loop.
+      $field_name = $instance_name;
+      break;
+    }
+  }
+
+  // Allow other modules to specify a different field name.
+  drupal_alter('commerce_physical_entity_dimensions_field_name', $field_name, $entity_type, $entity);
+
+  return $field_name;
+}
+
+/**
+ * Determines the dimensions to use for a product line item on an order.
+ *
+ * @param $line_item
+ *   A product line item whose single quantity dimensions should be determined.
+ *
+ * @return
+ *   A dimensions field value array representing the dimensions of a single
+ *   product referenced by the line item or NULL if no dimensions were found.
+ */
+function commerce_physical_product_line_item_dimensions($line_item) {
+  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
+  $dimensions = NULL;
+
+  // If the line item references a valid product...
+  if (!empty($line_item_wrapper->commerce_product)) {
+    $product = $line_item_wrapper->commerce_product->value();
+
+    if (!empty($product)) {
+      // If the product has a valid dimensions field...
+      $field_name = commerce_physical_entity_dimensions_field_name('commerce_product', $product);
+
+      if (!empty($field_name) && !empty($product->{$field_name})) {
+        // Extract the dimensions value from the product.
+        $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
+        $dimensions = $product_wrapper->{$field_name}->value();
+      }
+    }
+  }
+
+  // Allow other modules to alter the volume if necessary.
+  drupal_alter('commerce_physical_product_line_item_dimensions', $dimensions, $line_item);
+
+  return $dimensions;
+}
+
+/**
  * Determines the volume of an entire order.
  *
- * @param commerce_order $order
+ * @param $order
  *   The order object whose volume should be calculated.
- * @param string $unit
+ * @param $unit
  *   The unit of measurement to convert dimensions to before calculating the
  *   volume of the order in the related cubic unit.
  *
- * @return array
+ * @return
  *   A volume value array with keys representing the total 'volume' of the order
  *   in the 'unit' specified or NULL if no volume could be determined.
  */
@@ -256,57 +242,13 @@ function commerce_physical_order_volume(
   return $volume;
 }

-
-/**
- * Determines the dimensions of each product in an entire order.
- *
- * Other code can then use this data to figure out things like what the maximum
- * dimensions of any product in the order is, or what size shipping container
- * everything will fit into.
- *
- * @param commerce_order $order
- *   The order object whose dimensions should be returned.
- * @param string $unit
- *   The unit of measurement to use for the returned dimensions.
- *
- * @return array
- *   An array of dimension arrays. One per product in the order.
- *   weight field value array representing the total weight of the order using
- *   the specified unit of measurement or NULL if no weight could be determined.
- */
-function commerce_physical_order_dimensions($order, $unit = 'cm') {
-  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
-
-  $order_dimensions = array();
-
-  // Loop over each line item on the order.
-  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
-    // Get the weight value of product line items.
-    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
-      $line_item_dimensions = commerce_physical_product_line_item_dimensions($line_item_wrapper->value());
-
-      $order_dimensions = array_merge($order_dimensions, $line_item_dimensions);
-    }
-  }
-
-  // Now ensure that all dimensions supplied are in the requested units.
-  foreach ($order_dimensions as $key => $dimensions) {
-    $order_dimensions[$key] = physical_dimensions_convert($dimensions, $unit);
-  }
-
-  // Allow other modules to alter the weight if necessary.
-  drupal_alter('commerce_physical_order_dimensions', $order_dimensions, $order, $unit);
-
-  return $order_dimensions;
-}
-
 /**
  * Determines whether or not a line item should be considered shippable.
  *
- * @param commerce_line_item $line_item
+ * @param $line_item
  *   The line item object whose shippability is being determined.
  *
- * @return bool
+ * @return
  *   Boolean indicating whether or not the given line item represents something
  *   shippable; defaults to FALSE unless the line item represents a product line
  *   item with a discernible weight.
@@ -333,10 +275,10 @@ function commerce_physical_line_item_shi
 /**
  * Determines whether or not an order should be considered shippable.
  *
- * @param commerce_order $order
+ * @param $order
  *   The order object whose shippability should be determined.
  *
- * @return bool
+ * @return
  *   Boolean indicating whether or not the given order is shippable; defaults to
  *   FALSE unless any line item on the order is determined to be shippable.
  */
@@ -360,13 +302,14 @@ function commerce_physical_order_shippab
 }

 /**
- * Name of the shipping customer profile reference field for the given order.
+ * Determines the name of the shipping customer profile reference field for the
+ * given order.
  *
- * @param commerce_order $order
+ * @param $order
  *   The order whose shipping customer profile reference field name should be
  *   determined.
  *
- * @return string
+ * @return
  *   The name of the field to use on the order to find shipping information or
  *   NULL if none was found; defaults to commerce_customer_shipping if available
  *   or another customer profile reference if not (preferring profiles other
@@ -405,10 +348,10 @@ function commerce_physical_order_shippin
 /**
  * Determines the name of the phone number field of a customer profile.
  *
- * @param commerce_cutomer_profile $profile
+ * @param $profile
  *   The customer profile whose phone number field name should be determined.
  *
- * @return string
+ * @return
  *   The name of the field to use on the customer profile to find a phone number
  *   or NULL if none was found. Defaults to field_phone or field_phone_number if
  *   available; otherwise it's up to you to alter it in a custom module since we
@@ -432,12 +375,13 @@ function commerce_physical_customer_prof
 }

 /**
- * Whether or not a shipping customer profile is a residential address.
+ * Determines whether or not a shipping customer profile should be considered as
+ * a residential address.
  *
- * @param commerce_customer_profile $profile
+ * @param $profile
  *   The customer profile whose residential status should be determined.
  *
- * @return bool
+ * @return
  *   Boolean indicating whether or not the given profile has a residential
  *   address; defaults to TRUE unless otherwise determined by a custom module.
  */
Only in /tmp/hacked-cache-Dustin/hackedProjectWebFilesDownloader/module/commerce_physical/7.x-1.x-dev/commerce_physical/: commerce_physical.rules.inc
